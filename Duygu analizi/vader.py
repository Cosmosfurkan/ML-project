# -*- coding: utf-8 -*-
"""VADER.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KmsRoqA4R5e96U4KdH88tUJqZb2eqRp-
"""

import pandas as pd
import numpy as np
import nltk
import tensorflow as tf
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.tokenize import RegexpTokenizer
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from tensorflow import sparse
from tensorflow.sparse import reorder
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from keras.models import Sequential
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D

from keras.utils import to_categorical

# Load the 'interpress_news_category_tr_lite' dataset
dataset = pd.read_csv("/content/veriseti.csv")
dataset.head(10)
nltk.download('vader_lexicon')
sid = SentimentIntensityAnalyzer()

len(dataset)

kategori_veri_sayisi = dataset.groupby('Kategori').size()
print(kategori_veri_sayisi)

dataset['Icerik'] = dataset['Icerik'].replace(np.nan,'',regex=True)

sentiment_scores = []
for text in dataset['Icerik']:
        scores = sid.polarity_scores(text)
        sentiment_scores.append(scores['compound'])

dataset['Sentiment Score'] = sentiment_scores

def get_sentiment_label(score):
    if score >= 0.05:
      return 'Pozitif'
    elif score <= -0.05:
      return 'Negatif'
    else:
      return 'Nötr'

sentiment_labels = dataset['Sentiment Score'].apply(get_sentiment_label)

dataset['Sentiment Label'] = sentiment_labels

import matplotlib.pyplot as plt

sentiment_counts = dataset['Sentiment Label'].value_counts()

plt.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%')
plt.title('Duygu Dağılımı')
plt.savefig('duygu_dağılımı.png')
plt.show()

print(dataset['Kategori'].unique())

import matplotlib.pyplot as plt

categories = ['dunya', 'ekonomi', 'genel', 'guncel', 'kultur-sanat', 'magazin']
fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(15, 10))

for i, category in enumerate(categories):
    data = grouped[grouped['Kategori'] == category]

    # Check if data is empty before plotting
    if not data.empty:
        ax = axes[i // 3, i % 3]
        ax.pie(data['Adet'], labels=data['Sentiment Label'], autopct='%1.1f%%')
        ax.set_title(f'{category} Kategorisi için Duygu Sütunu ')
    else:
        print(f'{category} Kategorisi için Veri Yok ')

plt.tight_layout()
plt.savefig("Kategori_vs_duygu.png")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns  # Import seaborn for enhanced plotting capabilities

# Assuming dataset is a DataFrame containing the necessary columns

fig = plt.figure(figsize=(8, 6))

# Use seaborn for better visualization options
sns.barplot(data=grouped, x='Kategori', y='Adet', hue='Sentiment Label')
plt.title('Duygu Sütunu vs Kategori')
plt.xlabel('Kategori')
plt.ylabel('Adet')
plt.savefig("duygu_kategori_sentiment_label.png")
plt.show()